/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChinaMobileBundle_TYPES_H
#define ChinaMobileBundle_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace chinaMobile {

typedef struct _InParams__isset {
  _InParams__isset() : call_id(false), inter_idx(false), call_sor_id(false), call_dst_id(false), flow(false), auth_token(false), entrance_id(false), start_time(false), ses_time(false), suilu_region_id(false), cc_id(false), role_label(false), begin_play(false), end_play(false), result_time(false), flow_result_type(false), input(false), inter_no(false), org(false), newsess(false), trans_idx(false), begin_trans(false), end_trans(false), trans_result(false) {}
  bool call_id;
  bool inter_idx;
  bool call_sor_id;
  bool call_dst_id;
  bool flow;
  bool auth_token;
  bool entrance_id;
  bool start_time;
  bool ses_time;
  bool suilu_region_id;
  bool cc_id;
  bool role_label;
  bool begin_play;
  bool end_play;
  bool result_time;
  bool flow_result_type;
  bool input;
  bool inter_no;
  bool org;
  bool newsess;
  bool trans_idx;
  bool begin_trans;
  bool end_trans;
  bool trans_result;
} _InParams__isset;

class InParams {
 public:

  static const char* ascii_fingerprint; // = "87E4CDFDA65073C99F07C481ACD6AAB7";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0xE4,0xCD,0xFD,0xA6,0x50,0x73,0xC9,0x9F,0x07,0xC4,0x81,0xAC,0xD6,0xAA,0xB7};

  InParams() : call_id(), inter_idx(), call_sor_id(), call_dst_id(), flow(), auth_token(), entrance_id(), start_time(), ses_time(), suilu_region_id(), cc_id(), role_label(), begin_play(), end_play(), result_time(), flow_result_type(), input(), inter_no(), org(), newsess(), trans_idx(), begin_trans(), end_trans(), trans_result() {
  }

  virtual ~InParams() throw() {}

  std::string call_id;
  std::string inter_idx;
  std::string call_sor_id;
  std::string call_dst_id;
  std::string flow;
  std::string auth_token;
  std::string entrance_id;
  std::string start_time;
  std::string ses_time;
  std::string suilu_region_id;
  std::string cc_id;
  std::string role_label;
  std::string begin_play;
  std::string end_play;
  std::string result_time;
  std::string flow_result_type;
  std::string input;
  std::string inter_no;
  std::string org;
  std::string newsess;
  std::string trans_idx;
  std::string begin_trans;
  std::string end_trans;
  std::string trans_result;

  _InParams__isset __isset;

  void __set_call_id(const std::string& val) {
    call_id = val;
    __isset.call_id = true;
  }

  void __set_inter_idx(const std::string& val) {
    inter_idx = val;
    __isset.inter_idx = true;
  }

  void __set_call_sor_id(const std::string& val) {
    call_sor_id = val;
    __isset.call_sor_id = true;
  }

  void __set_call_dst_id(const std::string& val) {
    call_dst_id = val;
    __isset.call_dst_id = true;
  }

  void __set_flow(const std::string& val) {
    flow = val;
    __isset.flow = true;
  }

  void __set_auth_token(const std::string& val) {
    auth_token = val;
    __isset.auth_token = true;
  }

  void __set_entrance_id(const std::string& val) {
    entrance_id = val;
    __isset.entrance_id = true;
  }

  void __set_start_time(const std::string& val) {
    start_time = val;
    __isset.start_time = true;
  }

  void __set_ses_time(const std::string& val) {
    ses_time = val;
    __isset.ses_time = true;
  }

  void __set_suilu_region_id(const std::string& val) {
    suilu_region_id = val;
    __isset.suilu_region_id = true;
  }

  void __set_cc_id(const std::string& val) {
    cc_id = val;
    __isset.cc_id = true;
  }

  void __set_role_label(const std::string& val) {
    role_label = val;
    __isset.role_label = true;
  }

  void __set_begin_play(const std::string& val) {
    begin_play = val;
    __isset.begin_play = true;
  }

  void __set_end_play(const std::string& val) {
    end_play = val;
    __isset.end_play = true;
  }

  void __set_result_time(const std::string& val) {
    result_time = val;
    __isset.result_time = true;
  }

  void __set_flow_result_type(const std::string& val) {
    flow_result_type = val;
    __isset.flow_result_type = true;
  }

  void __set_input(const std::string& val) {
    input = val;
    __isset.input = true;
  }

  void __set_inter_no(const std::string& val) {
    inter_no = val;
    __isset.inter_no = true;
  }

  void __set_org(const std::string& val) {
    org = val;
    __isset.org = true;
  }

  void __set_newsess(const std::string& val) {
    newsess = val;
    __isset.newsess = true;
  }

  void __set_trans_idx(const std::string& val) {
    trans_idx = val;
    __isset.trans_idx = true;
  }

  void __set_begin_trans(const std::string& val) {
    begin_trans = val;
    __isset.begin_trans = true;
  }

  void __set_end_trans(const std::string& val) {
    end_trans = val;
    __isset.end_trans = true;
  }

  void __set_trans_result(const std::string& val) {
    trans_result = val;
    __isset.trans_result = true;
  }

  bool operator == (const InParams & rhs) const
  {
    if (__isset.call_id != rhs.__isset.call_id)
      return false;
    else if (__isset.call_id && !(call_id == rhs.call_id))
      return false;
    if (__isset.inter_idx != rhs.__isset.inter_idx)
      return false;
    else if (__isset.inter_idx && !(inter_idx == rhs.inter_idx))
      return false;
    if (__isset.call_sor_id != rhs.__isset.call_sor_id)
      return false;
    else if (__isset.call_sor_id && !(call_sor_id == rhs.call_sor_id))
      return false;
    if (__isset.call_dst_id != rhs.__isset.call_dst_id)
      return false;
    else if (__isset.call_dst_id && !(call_dst_id == rhs.call_dst_id))
      return false;
    if (__isset.flow != rhs.__isset.flow)
      return false;
    else if (__isset.flow && !(flow == rhs.flow))
      return false;
    if (__isset.auth_token != rhs.__isset.auth_token)
      return false;
    else if (__isset.auth_token && !(auth_token == rhs.auth_token))
      return false;
    if (__isset.entrance_id != rhs.__isset.entrance_id)
      return false;
    else if (__isset.entrance_id && !(entrance_id == rhs.entrance_id))
      return false;
    if (__isset.start_time != rhs.__isset.start_time)
      return false;
    else if (__isset.start_time && !(start_time == rhs.start_time))
      return false;
    if (__isset.ses_time != rhs.__isset.ses_time)
      return false;
    else if (__isset.ses_time && !(ses_time == rhs.ses_time))
      return false;
    if (__isset.suilu_region_id != rhs.__isset.suilu_region_id)
      return false;
    else if (__isset.suilu_region_id && !(suilu_region_id == rhs.suilu_region_id))
      return false;
    if (__isset.cc_id != rhs.__isset.cc_id)
      return false;
    else if (__isset.cc_id && !(cc_id == rhs.cc_id))
      return false;
    if (__isset.role_label != rhs.__isset.role_label)
      return false;
    else if (__isset.role_label && !(role_label == rhs.role_label))
      return false;
    if (__isset.begin_play != rhs.__isset.begin_play)
      return false;
    else if (__isset.begin_play && !(begin_play == rhs.begin_play))
      return false;
    if (__isset.end_play != rhs.__isset.end_play)
      return false;
    else if (__isset.end_play && !(end_play == rhs.end_play))
      return false;
    if (__isset.result_time != rhs.__isset.result_time)
      return false;
    else if (__isset.result_time && !(result_time == rhs.result_time))
      return false;
    if (__isset.flow_result_type != rhs.__isset.flow_result_type)
      return false;
    else if (__isset.flow_result_type && !(flow_result_type == rhs.flow_result_type))
      return false;
    if (__isset.input != rhs.__isset.input)
      return false;
    else if (__isset.input && !(input == rhs.input))
      return false;
    if (__isset.inter_no != rhs.__isset.inter_no)
      return false;
    else if (__isset.inter_no && !(inter_no == rhs.inter_no))
      return false;
    if (__isset.org != rhs.__isset.org)
      return false;
    else if (__isset.org && !(org == rhs.org))
      return false;
    if (__isset.newsess != rhs.__isset.newsess)
      return false;
    else if (__isset.newsess && !(newsess == rhs.newsess))
      return false;
    if (__isset.trans_idx != rhs.__isset.trans_idx)
      return false;
    else if (__isset.trans_idx && !(trans_idx == rhs.trans_idx))
      return false;
    if (__isset.begin_trans != rhs.__isset.begin_trans)
      return false;
    else if (__isset.begin_trans && !(begin_trans == rhs.begin_trans))
      return false;
    if (__isset.end_trans != rhs.__isset.end_trans)
      return false;
    else if (__isset.end_trans && !(end_trans == rhs.end_trans))
      return false;
    if (__isset.trans_result != rhs.__isset.trans_result)
      return false;
    else if (__isset.trans_result && !(trans_result == rhs.trans_result))
      return false;
    return true;
  }
  bool operator != (const InParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InParams &a, InParams &b);

typedef struct _OutParams__isset {
  _OutParams__isset() : call_id(false), inter_idx(false), flow_type(false), flow_node_name(false), model_type(false), prompt_type(false), prompt_wav(false), prompt_text(false), timeout(false), grammar(false), org(false), newsess(false), delay(false), act_params(false), call_sor_id(false), trans_idx(false), trans_type(false), route_value(false), call_dst_id(false), start_time(false), end_time(false), region_id(false), entrance_id(false), exit_id(false), user_type_id(false), suilu_region_id(false) {}
  bool call_id;
  bool inter_idx;
  bool flow_type;
  bool flow_node_name;
  bool model_type;
  bool prompt_type;
  bool prompt_wav;
  bool prompt_text;
  bool timeout;
  bool grammar;
  bool org;
  bool newsess;
  bool delay;
  bool act_params;
  bool call_sor_id;
  bool trans_idx;
  bool trans_type;
  bool route_value;
  bool call_dst_id;
  bool start_time;
  bool end_time;
  bool region_id;
  bool entrance_id;
  bool exit_id;
  bool user_type_id;
  bool suilu_region_id;
} _OutParams__isset;

class OutParams {
 public:

  static const char* ascii_fingerprint; // = "976BD24F768BEBA7FA4B65B743DDF088";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x6B,0xD2,0x4F,0x76,0x8B,0xEB,0xA7,0xFA,0x4B,0x65,0xB7,0x43,0xDD,0xF0,0x88};

  OutParams() : call_id(), inter_idx(), flow_type(), flow_node_name(), model_type(), prompt_type(), prompt_wav(), prompt_text(), timeout(), grammar(), org(), newsess(), delay(), act_params(), call_sor_id(), trans_idx(), trans_type(), route_value(), call_dst_id(), start_time(), end_time(), region_id(), entrance_id(), exit_id(), user_type_id(), suilu_region_id() {
  }

  virtual ~OutParams() throw() {}

  std::string call_id;
  std::string inter_idx;
  std::string flow_type;
  std::string flow_node_name;
  std::string model_type;
  std::string prompt_type;
  std::string prompt_wav;
  std::string prompt_text;
  std::string timeout;
  std::string grammar;
  std::string org;
  std::string newsess;
  std::string delay;
  std::string act_params;
  std::string call_sor_id;
  std::string trans_idx;
  std::string trans_type;
  std::string route_value;
  std::string call_dst_id;
  std::string start_time;
  std::string end_time;
  std::string region_id;
  std::string entrance_id;
  std::string exit_id;
  std::string user_type_id;
  std::string suilu_region_id;

  _OutParams__isset __isset;

  void __set_call_id(const std::string& val) {
    call_id = val;
    __isset.call_id = true;
  }

  void __set_inter_idx(const std::string& val) {
    inter_idx = val;
    __isset.inter_idx = true;
  }

  void __set_flow_type(const std::string& val) {
    flow_type = val;
    __isset.flow_type = true;
  }

  void __set_flow_node_name(const std::string& val) {
    flow_node_name = val;
    __isset.flow_node_name = true;
  }

  void __set_model_type(const std::string& val) {
    model_type = val;
    __isset.model_type = true;
  }

  void __set_prompt_type(const std::string& val) {
    prompt_type = val;
    __isset.prompt_type = true;
  }

  void __set_prompt_wav(const std::string& val) {
    prompt_wav = val;
    __isset.prompt_wav = true;
  }

  void __set_prompt_text(const std::string& val) {
    prompt_text = val;
    __isset.prompt_text = true;
  }

  void __set_timeout(const std::string& val) {
    timeout = val;
    __isset.timeout = true;
  }

  void __set_grammar(const std::string& val) {
    grammar = val;
    __isset.grammar = true;
  }

  void __set_org(const std::string& val) {
    org = val;
    __isset.org = true;
  }

  void __set_newsess(const std::string& val) {
    newsess = val;
    __isset.newsess = true;
  }

  void __set_delay(const std::string& val) {
    delay = val;
    __isset.delay = true;
  }

  void __set_act_params(const std::string& val) {
    act_params = val;
    __isset.act_params = true;
  }

  void __set_call_sor_id(const std::string& val) {
    call_sor_id = val;
    __isset.call_sor_id = true;
  }

  void __set_trans_idx(const std::string& val) {
    trans_idx = val;
    __isset.trans_idx = true;
  }

  void __set_trans_type(const std::string& val) {
    trans_type = val;
    __isset.trans_type = true;
  }

  void __set_route_value(const std::string& val) {
    route_value = val;
    __isset.route_value = true;
  }

  void __set_call_dst_id(const std::string& val) {
    call_dst_id = val;
    __isset.call_dst_id = true;
  }

  void __set_start_time(const std::string& val) {
    start_time = val;
    __isset.start_time = true;
  }

  void __set_end_time(const std::string& val) {
    end_time = val;
    __isset.end_time = true;
  }

  void __set_region_id(const std::string& val) {
    region_id = val;
    __isset.region_id = true;
  }

  void __set_entrance_id(const std::string& val) {
    entrance_id = val;
    __isset.entrance_id = true;
  }

  void __set_exit_id(const std::string& val) {
    exit_id = val;
    __isset.exit_id = true;
  }

  void __set_user_type_id(const std::string& val) {
    user_type_id = val;
    __isset.user_type_id = true;
  }

  void __set_suilu_region_id(const std::string& val) {
    suilu_region_id = val;
    __isset.suilu_region_id = true;
  }

  bool operator == (const OutParams & rhs) const
  {
    if (__isset.call_id != rhs.__isset.call_id)
      return false;
    else if (__isset.call_id && !(call_id == rhs.call_id))
      return false;
    if (__isset.inter_idx != rhs.__isset.inter_idx)
      return false;
    else if (__isset.inter_idx && !(inter_idx == rhs.inter_idx))
      return false;
    if (__isset.flow_type != rhs.__isset.flow_type)
      return false;
    else if (__isset.flow_type && !(flow_type == rhs.flow_type))
      return false;
    if (__isset.flow_node_name != rhs.__isset.flow_node_name)
      return false;
    else if (__isset.flow_node_name && !(flow_node_name == rhs.flow_node_name))
      return false;
    if (__isset.model_type != rhs.__isset.model_type)
      return false;
    else if (__isset.model_type && !(model_type == rhs.model_type))
      return false;
    if (__isset.prompt_type != rhs.__isset.prompt_type)
      return false;
    else if (__isset.prompt_type && !(prompt_type == rhs.prompt_type))
      return false;
    if (__isset.prompt_wav != rhs.__isset.prompt_wav)
      return false;
    else if (__isset.prompt_wav && !(prompt_wav == rhs.prompt_wav))
      return false;
    if (__isset.prompt_text != rhs.__isset.prompt_text)
      return false;
    else if (__isset.prompt_text && !(prompt_text == rhs.prompt_text))
      return false;
    if (__isset.timeout != rhs.__isset.timeout)
      return false;
    else if (__isset.timeout && !(timeout == rhs.timeout))
      return false;
    if (__isset.grammar != rhs.__isset.grammar)
      return false;
    else if (__isset.grammar && !(grammar == rhs.grammar))
      return false;
    if (__isset.org != rhs.__isset.org)
      return false;
    else if (__isset.org && !(org == rhs.org))
      return false;
    if (__isset.newsess != rhs.__isset.newsess)
      return false;
    else if (__isset.newsess && !(newsess == rhs.newsess))
      return false;
    if (__isset.delay != rhs.__isset.delay)
      return false;
    else if (__isset.delay && !(delay == rhs.delay))
      return false;
    if (__isset.act_params != rhs.__isset.act_params)
      return false;
    else if (__isset.act_params && !(act_params == rhs.act_params))
      return false;
    if (__isset.call_sor_id != rhs.__isset.call_sor_id)
      return false;
    else if (__isset.call_sor_id && !(call_sor_id == rhs.call_sor_id))
      return false;
    if (__isset.trans_idx != rhs.__isset.trans_idx)
      return false;
    else if (__isset.trans_idx && !(trans_idx == rhs.trans_idx))
      return false;
    if (__isset.trans_type != rhs.__isset.trans_type)
      return false;
    else if (__isset.trans_type && !(trans_type == rhs.trans_type))
      return false;
    if (__isset.route_value != rhs.__isset.route_value)
      return false;
    else if (__isset.route_value && !(route_value == rhs.route_value))
      return false;
    if (__isset.call_dst_id != rhs.__isset.call_dst_id)
      return false;
    else if (__isset.call_dst_id && !(call_dst_id == rhs.call_dst_id))
      return false;
    if (__isset.start_time != rhs.__isset.start_time)
      return false;
    else if (__isset.start_time && !(start_time == rhs.start_time))
      return false;
    if (__isset.end_time != rhs.__isset.end_time)
      return false;
    else if (__isset.end_time && !(end_time == rhs.end_time))
      return false;
    if (__isset.region_id != rhs.__isset.region_id)
      return false;
    else if (__isset.region_id && !(region_id == rhs.region_id))
      return false;
    if (__isset.entrance_id != rhs.__isset.entrance_id)
      return false;
    else if (__isset.entrance_id && !(entrance_id == rhs.entrance_id))
      return false;
    if (__isset.exit_id != rhs.__isset.exit_id)
      return false;
    else if (__isset.exit_id && !(exit_id == rhs.exit_id))
      return false;
    if (__isset.user_type_id != rhs.__isset.user_type_id)
      return false;
    else if (__isset.user_type_id && !(user_type_id == rhs.user_type_id))
      return false;
    if (__isset.suilu_region_id != rhs.__isset.suilu_region_id)
      return false;
    else if (__isset.suilu_region_id && !(suilu_region_id == rhs.suilu_region_id))
      return false;
    return true;
  }
  bool operator != (const OutParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OutParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OutParams &a, OutParams &b);

typedef struct _ChinaMobileBundle__isset {
  _ChinaMobileBundle__isset() : userid(false), inaction(false), inparams(false), ret(false), outaction(false), outparams(false), authResult(false), NLUResult(false), ASRResult(false), trace_id(false) {}
  bool userid;
  bool inaction;
  bool inparams;
  bool ret;
  bool outaction;
  bool outparams;
  bool authResult;
  bool NLUResult;
  bool ASRResult;
  bool trace_id;
} _ChinaMobileBundle__isset;

class ChinaMobileBundle {
 public:

  static const char* ascii_fingerprint; // = "BA22A9C42BD1978EC4A6377C4FC08315";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x22,0xA9,0xC4,0x2B,0xD1,0x97,0x8E,0xC4,0xA6,0x37,0x7C,0x4F,0xC0,0x83,0x15};

  ChinaMobileBundle() : userid(), inaction(0), ret(0), outaction(0), authResult(), NLUResult(), ASRResult(), trace_id() {
  }

  virtual ~ChinaMobileBundle() throw() {}

  std::string userid;
  int32_t inaction;
  InParams inparams;
  int32_t ret;
  int32_t outaction;
  OutParams outparams;
  std::string authResult;
  std::string NLUResult;
  std::string ASRResult;
  std::string trace_id;

  _ChinaMobileBundle__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
    __isset.userid = true;
  }

  void __set_inaction(const int32_t val) {
    inaction = val;
    __isset.inaction = true;
  }

  void __set_inparams(const InParams& val) {
    inparams = val;
    __isset.inparams = true;
  }

  void __set_ret(const int32_t val) {
    ret = val;
    __isset.ret = true;
  }

  void __set_outaction(const int32_t val) {
    outaction = val;
    __isset.outaction = true;
  }

  void __set_outparams(const OutParams& val) {
    outparams = val;
    __isset.outparams = true;
  }

  void __set_authResult(const std::string& val) {
    authResult = val;
    __isset.authResult = true;
  }

  void __set_NLUResult(const std::string& val) {
    NLUResult = val;
    __isset.NLUResult = true;
  }

  void __set_ASRResult(const std::string& val) {
    ASRResult = val;
    __isset.ASRResult = true;
  }

  void __set_trace_id(const std::string& val) {
    trace_id = val;
    __isset.trace_id = true;
  }

  bool operator == (const ChinaMobileBundle & rhs) const
  {
    if (__isset.userid != rhs.__isset.userid)
      return false;
    else if (__isset.userid && !(userid == rhs.userid))
      return false;
    if (__isset.inaction != rhs.__isset.inaction)
      return false;
    else if (__isset.inaction && !(inaction == rhs.inaction))
      return false;
    if (__isset.inparams != rhs.__isset.inparams)
      return false;
    else if (__isset.inparams && !(inparams == rhs.inparams))
      return false;
    if (__isset.ret != rhs.__isset.ret)
      return false;
    else if (__isset.ret && !(ret == rhs.ret))
      return false;
    if (__isset.outaction != rhs.__isset.outaction)
      return false;
    else if (__isset.outaction && !(outaction == rhs.outaction))
      return false;
    if (__isset.outparams != rhs.__isset.outparams)
      return false;
    else if (__isset.outparams && !(outparams == rhs.outparams))
      return false;
    if (__isset.authResult != rhs.__isset.authResult)
      return false;
    else if (__isset.authResult && !(authResult == rhs.authResult))
      return false;
    if (__isset.NLUResult != rhs.__isset.NLUResult)
      return false;
    else if (__isset.NLUResult && !(NLUResult == rhs.NLUResult))
      return false;
    if (__isset.ASRResult != rhs.__isset.ASRResult)
      return false;
    else if (__isset.ASRResult && !(ASRResult == rhs.ASRResult))
      return false;
    if (__isset.trace_id != rhs.__isset.trace_id)
      return false;
    else if (__isset.trace_id && !(trace_id == rhs.trace_id))
      return false;
    return true;
  }
  bool operator != (const ChinaMobileBundle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChinaMobileBundle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChinaMobileBundle &a, ChinaMobileBundle &b);

} // namespace

#endif
