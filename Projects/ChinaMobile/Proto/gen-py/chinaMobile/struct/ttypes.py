#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class InParams:
  """
  Attributes:
   - call_id
   - inter_idx
   - call_sor_id
   - call_dst_id
   - flow
   - auth_token
   - entrance_id
   - start_time
   - ses_time
   - suilu_region_id
   - cc_id
   - role_label
   - begin_play
   - end_play
   - result_time
   - flow_result_type
   - input
   - org
   - newsess
   - trans_idx
   - begin_trans
   - end_trans
   - trans_result
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'call_id', None, None, ), # 1
    (2, TType.STRING, 'inter_idx', None, None, ), # 2
    (3, TType.STRING, 'call_sor_id', None, None, ), # 3
    (4, TType.STRING, 'call_dst_id', None, None, ), # 4
    (5, TType.STRING, 'flow', None, None, ), # 5
    (6, TType.STRING, 'auth_token', None, None, ), # 6
    (7, TType.STRING, 'entrance_id', None, None, ), # 7
    (8, TType.STRING, 'start_time', None, None, ), # 8
    (9, TType.STRING, 'ses_time', None, None, ), # 9
    (10, TType.STRING, 'suilu_region_id', None, None, ), # 10
    (11, TType.STRING, 'cc_id', None, None, ), # 11
    (12, TType.STRING, 'role_label', None, None, ), # 12
    (13, TType.STRING, 'begin_play', None, None, ), # 13
    (14, TType.STRING, 'end_play', None, None, ), # 14
    (15, TType.STRING, 'result_time', None, None, ), # 15
    (16, TType.STRING, 'flow_result_type', None, None, ), # 16
    (17, TType.STRING, 'input', None, None, ), # 17
    (18, TType.STRING, 'org', None, None, ), # 18
    (19, TType.STRING, 'newsess', None, None, ), # 19
    (20, TType.STRING, 'trans_idx', None, None, ), # 20
    (21, TType.STRING, 'begin_trans', None, None, ), # 21
    (22, TType.STRING, 'end_trans', None, None, ), # 22
    (23, TType.STRING, 'trans_result', None, None, ), # 23
  )

  def __init__(self, call_id=None, inter_idx=None, call_sor_id=None, call_dst_id=None, flow=None, auth_token=None, entrance_id=None, start_time=None, ses_time=None, suilu_region_id=None, cc_id=None, role_label=None, begin_play=None, end_play=None, result_time=None, flow_result_type=None, input=None, org=None, newsess=None, trans_idx=None, begin_trans=None, end_trans=None, trans_result=None,):
    self.call_id = call_id
    self.inter_idx = inter_idx
    self.call_sor_id = call_sor_id
    self.call_dst_id = call_dst_id
    self.flow = flow
    self.auth_token = auth_token
    self.entrance_id = entrance_id
    self.start_time = start_time
    self.ses_time = ses_time
    self.suilu_region_id = suilu_region_id
    self.cc_id = cc_id
    self.role_label = role_label
    self.begin_play = begin_play
    self.end_play = end_play
    self.result_time = result_time
    self.flow_result_type = flow_result_type
    self.input = input
    self.org = org
    self.newsess = newsess
    self.trans_idx = trans_idx
    self.begin_trans = begin_trans
    self.end_trans = end_trans
    self.trans_result = trans_result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.call_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.inter_idx = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.call_sor_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.call_dst_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.flow = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.auth_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.entrance_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ses_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.suilu_region_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.cc_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.role_label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.begin_play = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.end_play = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.result_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.flow_result_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.input = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.org = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.newsess = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.trans_idx = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.begin_trans = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.end_trans = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.trans_result = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InParams')
    if self.call_id is not None:
      oprot.writeFieldBegin('call_id', TType.STRING, 1)
      oprot.writeString(self.call_id)
      oprot.writeFieldEnd()
    if self.inter_idx is not None:
      oprot.writeFieldBegin('inter_idx', TType.STRING, 2)
      oprot.writeString(self.inter_idx)
      oprot.writeFieldEnd()
    if self.call_sor_id is not None:
      oprot.writeFieldBegin('call_sor_id', TType.STRING, 3)
      oprot.writeString(self.call_sor_id)
      oprot.writeFieldEnd()
    if self.call_dst_id is not None:
      oprot.writeFieldBegin('call_dst_id', TType.STRING, 4)
      oprot.writeString(self.call_dst_id)
      oprot.writeFieldEnd()
    if self.flow is not None:
      oprot.writeFieldBegin('flow', TType.STRING, 5)
      oprot.writeString(self.flow)
      oprot.writeFieldEnd()
    if self.auth_token is not None:
      oprot.writeFieldBegin('auth_token', TType.STRING, 6)
      oprot.writeString(self.auth_token)
      oprot.writeFieldEnd()
    if self.entrance_id is not None:
      oprot.writeFieldBegin('entrance_id', TType.STRING, 7)
      oprot.writeString(self.entrance_id)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 8)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.ses_time is not None:
      oprot.writeFieldBegin('ses_time', TType.STRING, 9)
      oprot.writeString(self.ses_time)
      oprot.writeFieldEnd()
    if self.suilu_region_id is not None:
      oprot.writeFieldBegin('suilu_region_id', TType.STRING, 10)
      oprot.writeString(self.suilu_region_id)
      oprot.writeFieldEnd()
    if self.cc_id is not None:
      oprot.writeFieldBegin('cc_id', TType.STRING, 11)
      oprot.writeString(self.cc_id)
      oprot.writeFieldEnd()
    if self.role_label is not None:
      oprot.writeFieldBegin('role_label', TType.STRING, 12)
      oprot.writeString(self.role_label)
      oprot.writeFieldEnd()
    if self.begin_play is not None:
      oprot.writeFieldBegin('begin_play', TType.STRING, 13)
      oprot.writeString(self.begin_play)
      oprot.writeFieldEnd()
    if self.end_play is not None:
      oprot.writeFieldBegin('end_play', TType.STRING, 14)
      oprot.writeString(self.end_play)
      oprot.writeFieldEnd()
    if self.result_time is not None:
      oprot.writeFieldBegin('result_time', TType.STRING, 15)
      oprot.writeString(self.result_time)
      oprot.writeFieldEnd()
    if self.flow_result_type is not None:
      oprot.writeFieldBegin('flow_result_type', TType.STRING, 16)
      oprot.writeString(self.flow_result_type)
      oprot.writeFieldEnd()
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.STRING, 17)
      oprot.writeString(self.input)
      oprot.writeFieldEnd()
    if self.org is not None:
      oprot.writeFieldBegin('org', TType.STRING, 18)
      oprot.writeString(self.org)
      oprot.writeFieldEnd()
    if self.newsess is not None:
      oprot.writeFieldBegin('newsess', TType.STRING, 19)
      oprot.writeString(self.newsess)
      oprot.writeFieldEnd()
    if self.trans_idx is not None:
      oprot.writeFieldBegin('trans_idx', TType.STRING, 20)
      oprot.writeString(self.trans_idx)
      oprot.writeFieldEnd()
    if self.begin_trans is not None:
      oprot.writeFieldBegin('begin_trans', TType.STRING, 21)
      oprot.writeString(self.begin_trans)
      oprot.writeFieldEnd()
    if self.end_trans is not None:
      oprot.writeFieldBegin('end_trans', TType.STRING, 22)
      oprot.writeString(self.end_trans)
      oprot.writeFieldEnd()
    if self.trans_result is not None:
      oprot.writeFieldBegin('trans_result', TType.STRING, 23)
      oprot.writeString(self.trans_result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.call_id is None:
      raise TProtocol.TProtocolException(message='Required field call_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OutParams:
  """
  Attributes:
   - call_id
   - inter_idx
   - flow_type
   - flow_node_name
   - model_type
   - prompt_type
   - prompt_wav
   - prompt_text
   - timeout
   - grammar
   - org
   - newsess
   - delay
   - act_params
   - trans_idx
   - call_sor_id
   - trans_type
   - route_value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'call_id', None, None, ), # 1
    (2, TType.STRING, 'inter_idx', None, None, ), # 2
    (3, TType.STRING, 'flow_type', None, None, ), # 3
    (4, TType.STRING, 'flow_node_name', None, None, ), # 4
    (5, TType.STRING, 'model_type', None, None, ), # 5
    (6, TType.STRING, 'prompt_type', None, None, ), # 6
    (7, TType.STRING, 'prompt_wav', None, None, ), # 7
    (8, TType.STRING, 'prompt_text', None, None, ), # 8
    (9, TType.STRING, 'timeout', None, None, ), # 9
    (10, TType.STRING, 'grammar', None, None, ), # 10
    (11, TType.STRING, 'org', None, None, ), # 11
    (12, TType.STRING, 'newsess', None, None, ), # 12
    (13, TType.STRING, 'delay', None, None, ), # 13
    (14, TType.STRING, 'act_params', None, None, ), # 14
    (15, TType.STRING, 'trans_idx', None, None, ), # 15
    (16, TType.STRING, 'call_sor_id', None, None, ), # 16
    (17, TType.STRING, 'trans_type', None, None, ), # 17
    (18, TType.STRING, 'route_value', None, None, ), # 18
  )

  def __init__(self, call_id=None, inter_idx=None, flow_type=None, flow_node_name=None, model_type=None, prompt_type=None, prompt_wav=None, prompt_text=None, timeout=None, grammar=None, org=None, newsess=None, delay=None, act_params=None, trans_idx=None, call_sor_id=None, trans_type=None, route_value=None,):
    self.call_id = call_id
    self.inter_idx = inter_idx
    self.flow_type = flow_type
    self.flow_node_name = flow_node_name
    self.model_type = model_type
    self.prompt_type = prompt_type
    self.prompt_wav = prompt_wav
    self.prompt_text = prompt_text
    self.timeout = timeout
    self.grammar = grammar
    self.org = org
    self.newsess = newsess
    self.delay = delay
    self.act_params = act_params
    self.trans_idx = trans_idx
    self.call_sor_id = call_sor_id
    self.trans_type = trans_type
    self.route_value = route_value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.call_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.inter_idx = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.flow_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.flow_node_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.model_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.prompt_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.prompt_wav = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.prompt_text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.timeout = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.grammar = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.org = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.newsess = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.delay = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.act_params = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.trans_idx = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.call_sor_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.trans_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.route_value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OutParams')
    if self.call_id is not None:
      oprot.writeFieldBegin('call_id', TType.STRING, 1)
      oprot.writeString(self.call_id)
      oprot.writeFieldEnd()
    if self.inter_idx is not None:
      oprot.writeFieldBegin('inter_idx', TType.STRING, 2)
      oprot.writeString(self.inter_idx)
      oprot.writeFieldEnd()
    if self.flow_type is not None:
      oprot.writeFieldBegin('flow_type', TType.STRING, 3)
      oprot.writeString(self.flow_type)
      oprot.writeFieldEnd()
    if self.flow_node_name is not None:
      oprot.writeFieldBegin('flow_node_name', TType.STRING, 4)
      oprot.writeString(self.flow_node_name)
      oprot.writeFieldEnd()
    if self.model_type is not None:
      oprot.writeFieldBegin('model_type', TType.STRING, 5)
      oprot.writeString(self.model_type)
      oprot.writeFieldEnd()
    if self.prompt_type is not None:
      oprot.writeFieldBegin('prompt_type', TType.STRING, 6)
      oprot.writeString(self.prompt_type)
      oprot.writeFieldEnd()
    if self.prompt_wav is not None:
      oprot.writeFieldBegin('prompt_wav', TType.STRING, 7)
      oprot.writeString(self.prompt_wav)
      oprot.writeFieldEnd()
    if self.prompt_text is not None:
      oprot.writeFieldBegin('prompt_text', TType.STRING, 8)
      oprot.writeString(self.prompt_text)
      oprot.writeFieldEnd()
    if self.timeout is not None:
      oprot.writeFieldBegin('timeout', TType.STRING, 9)
      oprot.writeString(self.timeout)
      oprot.writeFieldEnd()
    if self.grammar is not None:
      oprot.writeFieldBegin('grammar', TType.STRING, 10)
      oprot.writeString(self.grammar)
      oprot.writeFieldEnd()
    if self.org is not None:
      oprot.writeFieldBegin('org', TType.STRING, 11)
      oprot.writeString(self.org)
      oprot.writeFieldEnd()
    if self.newsess is not None:
      oprot.writeFieldBegin('newsess', TType.STRING, 12)
      oprot.writeString(self.newsess)
      oprot.writeFieldEnd()
    if self.delay is not None:
      oprot.writeFieldBegin('delay', TType.STRING, 13)
      oprot.writeString(self.delay)
      oprot.writeFieldEnd()
    if self.act_params is not None:
      oprot.writeFieldBegin('act_params', TType.STRING, 14)
      oprot.writeString(self.act_params)
      oprot.writeFieldEnd()
    if self.trans_idx is not None:
      oprot.writeFieldBegin('trans_idx', TType.STRING, 15)
      oprot.writeString(self.trans_idx)
      oprot.writeFieldEnd()
    if self.call_sor_id is not None:
      oprot.writeFieldBegin('call_sor_id', TType.STRING, 16)
      oprot.writeString(self.call_sor_id)
      oprot.writeFieldEnd()
    if self.trans_type is not None:
      oprot.writeFieldBegin('trans_type', TType.STRING, 17)
      oprot.writeString(self.trans_type)
      oprot.writeFieldEnd()
    if self.route_value is not None:
      oprot.writeFieldBegin('route_value', TType.STRING, 18)
      oprot.writeString(self.route_value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.call_id is None:
      raise TProtocol.TProtocolException(message='Required field call_id is unset!')
    if self.inter_idx is None:
      raise TProtocol.TProtocolException(message='Required field inter_idx is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChinaMobileBundle:
  """
  Attributes:
   - userid
   - inaction
   - inparams
   - ret
   - outaction
   - outparams
   - authResult
   - NLUResult
   - ASRResult
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.I32, 'inaction', None, None, ), # 2
    (3, TType.STRUCT, 'inparams', (InParams, InParams.thrift_spec), None, ), # 3
    (4, TType.I32, 'ret', None, None, ), # 4
    (5, TType.I32, 'outaction', None, None, ), # 5
    (6, TType.STRUCT, 'outparams', (OutParams, OutParams.thrift_spec), None, ), # 6
    (7, TType.STRING, 'authResult', None, None, ), # 7
    (8, TType.STRING, 'NLUResult', None, None, ), # 8
    (9, TType.STRING, 'ASRResult', None, None, ), # 9
  )

  def __init__(self, userid=None, inaction=None, inparams=None, ret=None, outaction=None, outparams=None, authResult=None, NLUResult=None, ASRResult=None,):
    self.userid = userid
    self.inaction = inaction
    self.inparams = inparams
    self.ret = ret
    self.outaction = outaction
    self.outparams = outparams
    self.authResult = authResult
    self.NLUResult = NLUResult
    self.ASRResult = ASRResult

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.inaction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.inparams = InParams()
          self.inparams.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.outaction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.outparams = OutParams()
          self.outparams.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.authResult = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.NLUResult = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ASRResult = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChinaMobileBundle')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.inaction is not None:
      oprot.writeFieldBegin('inaction', TType.I32, 2)
      oprot.writeI32(self.inaction)
      oprot.writeFieldEnd()
    if self.inparams is not None:
      oprot.writeFieldBegin('inparams', TType.STRUCT, 3)
      self.inparams.write(oprot)
      oprot.writeFieldEnd()
    if self.ret is not None:
      oprot.writeFieldBegin('ret', TType.I32, 4)
      oprot.writeI32(self.ret)
      oprot.writeFieldEnd()
    if self.outaction is not None:
      oprot.writeFieldBegin('outaction', TType.I32, 5)
      oprot.writeI32(self.outaction)
      oprot.writeFieldEnd()
    if self.outparams is not None:
      oprot.writeFieldBegin('outparams', TType.STRUCT, 6)
      self.outparams.write(oprot)
      oprot.writeFieldEnd()
    if self.authResult is not None:
      oprot.writeFieldBegin('authResult', TType.STRING, 7)
      oprot.writeString(self.authResult)
      oprot.writeFieldEnd()
    if self.NLUResult is not None:
      oprot.writeFieldBegin('NLUResult', TType.STRING, 8)
      oprot.writeString(self.NLUResult)
      oprot.writeFieldEnd()
    if self.ASRResult is not None:
      oprot.writeFieldBegin('ASRResult', TType.STRING, 9)
      oprot.writeString(self.ASRResult)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
